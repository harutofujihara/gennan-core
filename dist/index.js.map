{"version":3,"sources":["webpack://gennan-core/webpack/universalModuleDefinition","webpack://gennan-core/./src/gennanCore.ts","webpack://gennan-core/./src/index.ts","webpack://gennan-core/./src/rule/board.ts","webpack://gennan-core/./src/rule/index.ts","webpack://gennan-core/./src/sgf/index.ts","webpack://gennan-core/./src/sgf/node.ts","webpack://gennan-core/./src/sgf/parser.ts","webpack://gennan-core/./src/sgf/path.ts","webpack://gennan-core/./src/sgf/stringifier.ts","webpack://gennan-core/./src/sgf/tree.ts","webpack://gennan-core/./src/sgf/utils.ts","webpack://gennan-core/./src/types/color.ts","webpack://gennan-core/./src/types/gridNum.ts","webpack://gennan-core/./src/types/index.ts","webpack://gennan-core/./src/types/markupSymbol.ts","webpack://gennan-core/./src/types/point.ts","webpack://gennan-core/./src/types/pointState.ts","webpack://gennan-core/./src/types/property.ts","webpack://gennan-core/./src/utils.ts","webpack://gennan-core/webpack/bootstrap","webpack://gennan-core/webpack/startup"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","import {\n  Color,\n  GridNum,\n  isGridNum,\n  Move,\n  Point,\n  PointState,\n  Stone,\n  addProperty,\n  Property,\n  removeProperty,\n  MarkupSymbol,\n  markupSymbolToProperty,\n  cloneProperties,\n} from \"./types\";\nimport {\n  Tree,\n  TreePath,\n  pointTo,\n  toPoint,\n  toTree,\n  nodeToMove,\n  cloneNode,\n  propertiesToSgf,\n} from \"./sgf\";\nimport { Board } from \"./rule\";\nimport { nextAlpha } from \"./utils\";\n\nexport type MoveOption = {\n  idx: number;\n  move: Move;\n};\n\nexport type ViewPointState = {\n  color?: Color;\n  circle: boolean;\n  square: boolean;\n  triangle: boolean;\n  cross: boolean;\n  text?: string;\n  current: boolean;\n  star: boolean;\n  nextIndex?: number;\n};\n\nexport type ViewBoard = Array<Array<ViewPointState>>;\n\nconst STAR_POINTS = {\n  9: [{ x: 5, y: 5 }],\n  13: [\n    { x: 4, y: 4 },\n    { x: 4, y: 10 },\n    { x: 7, y: 7 },\n    { x: 10, y: 4 },\n    { x: 10, y: 10 },\n  ],\n  19: [\n    { x: 4, y: 4 },\n    { x: 4, y: 10 },\n    { x: 4, y: 16 },\n    { x: 10, y: 4 },\n    { x: 10, y: 10 },\n    { x: 10, y: 16 },\n    { x: 16, y: 4 },\n    { x: 16, y: 10 },\n    { x: 16, y: 16 },\n  ],\n};\n\nclass GennanCore {\n  private tree: Tree;\n  private board: Board;\n\n  private constructor(tree: Tree) {\n    this.tree = tree;\n    this.board = new Board({\n      gridNum: this.gridNum,\n      fixedStones: this.fixedStones,\n    });\n  }\n\n  /**\n   * Factory\n   * @param gridNum\n   */\n  static create(gridNum: GridNum = 19): GennanCore {\n    const sgf = \"(;CA[utf-8]FF[4]GM[1]SZ[\" + String(gridNum) + \"])\";\n    return new GennanCore(toTree(sgf));\n  }\n\n  /**\n   * Factory\n   * @param sgf\n   */\n  static createFromSgf(sgf: string): GennanCore {\n    return new GennanCore(toTree(sgf));\n  }\n\n  /**\n   * BoardState for View\n   */\n  get viewBoard(): ViewBoard {\n    const viewBoard: ViewBoard = this.board.boardState\n      .filter((_, i) => i !== 0 && i !== this.board.boardState.length - 1)\n      .map((v) => {\n        return v\n          .filter((_, i) => i !== 0 && i !== this.board.boardState.length - 1)\n          .map((vv) => {\n            let color;\n            if (vv === PointState.Black) color = Color.Black;\n            if (vv === PointState.White) color = Color.White;\n            return {\n              color,\n              circle: false,\n              square: false,\n              triangle: false,\n              cross: false,\n              current: false,\n              star: false,\n            };\n          });\n      });\n\n    // markups\n    this.tree.properties[Property.CR]?.map((sp) => {\n      const point = toPoint(sp);\n      viewBoard[point.x - 1][point.y - 1].circle = true; // viewBoardは1から始まるので地点をずらす\n    });\n    this.tree.properties[Property.TR]?.map((sp) => {\n      const point = toPoint(sp);\n      viewBoard[point.x - 1][point.y - 1].triangle = true;\n    });\n    this.tree.properties[Property.SQ]?.map((sp) => {\n      const point = toPoint(sp);\n      viewBoard[point.x - 1][point.y - 1].square = true;\n    });\n    this.tree.properties[Property.MA]?.map((sp) => {\n      const point = toPoint(sp);\n      viewBoard[point.x - 1][point.y - 1].cross = true;\n    });\n    this.tree.properties[Property.LB]?.map((sp) => {\n      const spl = sp.split(\":\");\n      const point = toPoint(spl[0]);\n      viewBoard[point.x - 1][point.y - 1].text = spl[1];\n    });\n\n    // star\n    STAR_POINTS[this.gridNum].map(\n      (p) => (viewBoard[p.x - 1][p.y - 1].star = true)\n    );\n\n    // current\n    if (!this.tree.atRoot()) {\n      const move = nodeToMove(this.tree.node);\n      if (move.point != null) {\n        viewBoard[move.point.x - 1][move.point.y - 1].current = true;\n      }\n    }\n\n    // next\n    const nos = this.nextMoveOptions.filter((no) => no.move.point != null);\n\n    if (nos.length > 0) {\n      nos.map((no) => {\n        if (no.move.point != null) {\n          viewBoard[no.move.point.x - 1][no.move.point.y - 1].nextIndex =\n            no.idx;\n        }\n      });\n    }\n\n    return viewBoard;\n  }\n\n  get sgf(): string {\n    return this.tree.toSgf();\n  }\n\n  get snapshotSgf(): string {\n    // stones\n    const clonedRootProperties = cloneProperties(this.tree.rootNode.properties);\n    let newProps = clonedRootProperties;\n    const gridNum = this.board.boardState.length;\n    for (let x = 0; x < gridNum; x++) {\n      for (let y = 0; y < gridNum; y++) {\n        if (this.board.boardState[x][y] === PointState.Black) {\n          newProps = addProperty(newProps, Property.AB, pointTo({ x, y }));\n        }\n        if (this.board.boardState[x][y] === PointState.White) {\n          newProps = addProperty(newProps, Property.AW, pointTo({ x, y }));\n        }\n      }\n    }\n\n    // markups\n    this.tree.properties[Property.CR]?.map((cp) => {\n      newProps = addProperty(newProps, Property.CR, cp);\n    });\n    this.tree.properties[Property.TR]?.map((tp) => {\n      newProps = addProperty(newProps, Property.TR, tp);\n    });\n    this.tree.properties[Property.SQ]?.map((sp) => {\n      newProps = addProperty(newProps, Property.SQ, sp);\n    });\n    this.tree.properties[Property.MA]?.map((map) => {\n      newProps = addProperty(newProps, Property.MA, map);\n    });\n    this.tree.properties[Property.LB]?.map((lbp) => {\n      newProps = addProperty(newProps, Property.LB, lbp);\n    });\n\n    const sgf = propertiesToSgf(newProps);\n\n    return \"(\" + sgf + \")\";\n  }\n\n  get currentPath(): TreePath {\n    return this.tree.getCurrentPath();\n  }\n\n  get nextMoveOptions(): Array<MoveOption> {\n    return this.tree.nextNodes.map((v, i) => {\n      return {\n        idx: i,\n        move: nodeToMove(v),\n      };\n    });\n  }\n\n  get gridNum(): GridNum {\n    const sz = this.tree.rootProperties[Property.SZ];\n    if (sz != null) {\n      const gn = Number(sz[0]);\n      if (isGridNum(gn)) return gn;\n    }\n\n    return this.board ? this.board.gridNum : 19;\n  }\n\n  get teban(): Color {\n    return this.board.teban;\n  }\n\n  get phase(): Number {\n    return this.board.phase;\n  }\n\n  get fixedStones(): Array<Stone> {\n    const stones: Array<Stone> = [];\n    const blacks = this.tree.rootProperties[Property.AB];\n    if (blacks != null) {\n      blacks.map((v) => stones.push({ color: Color.Black, point: toPoint(v) }));\n    }\n\n    const whites = this.tree.rootProperties[Property.AW];\n    if (whites != null) {\n      whites.map((v) => stones.push({ color: Color.White, point: toPoint(v) }));\n    }\n\n    return stones;\n  }\n\n  get gameName(): string | undefined {\n    const gn = this.tree.rootProperties[Property.GN];\n    if (gn != null) {\n      return gn[0];\n    }\n  }\n  public setGameName(gameName: string): void {\n    if (this.gameName != null) {\n      this.removeRootProp(Property.GN, this.gameName);\n    }\n    this.setRootProp(Property.GN, gameName);\n  }\n\n  get blackPlayer(): string | undefined {\n    const bp = this.tree.rootProperties[Property.PB];\n    if (bp != null) {\n      return bp[0];\n    }\n  }\n  public setBlackPlayer(blackPlayer: string): void {\n    if (this.blackPlayer != null) {\n      this.removeRootProp(Property.PB, this.blackPlayer);\n    }\n    this.setRootProp(Property.PB, blackPlayer);\n  }\n\n  get whitePlayer(): string | undefined {\n    const qp = this.tree.rootProperties[Property.PW];\n    if (qp != null) {\n      return qp[0];\n    }\n  }\n  public setWhitePlayer(whitePlayer: string): void {\n    if (this.whitePlayer != null) {\n      this.removeRootProp(Property.PW, this.whitePlayer);\n    }\n    this.setRootProp(Property.PW, whitePlayer);\n  }\n\n  get komi(): string | undefined {\n    const km = this.tree.rootProperties[Property.KM];\n    if (km != null) {\n      return km[0];\n    }\n  }\n\n  public setKomi(komi: string): void {\n    if (this.komi != null) {\n      this.removeRootProp(Property.KM, this.komi);\n    }\n    this.setRootProp(Property.KM, komi);\n  }\n\n  get gameDate(): string | undefined {\n    const date = this.tree.rootProperties[Property.DT];\n    if (date != null) {\n      return date[0];\n    }\n  }\n\n  public setGameDate(date: string): void {\n    if (this.gameDate != null) {\n      this.removeRootProp(Property.DT, this.gameDate);\n    }\n    this.setRootProp(Property.DT, date);\n  }\n\n  get gameResult(): string | undefined {\n    const result = this.tree.rootProperties[Property.RE];\n    if (result != null) {\n      return result[0];\n    }\n  }\n\n  public setGameResult(result: string): void {\n    if (this.gameResult != null) {\n      this.removeRootProp(Property.RE, this.gameResult);\n    }\n    this.setRootProp(Property.RE, result);\n  }\n\n  get comment(): string | undefined {\n    const c = this.tree.properties[Property.C];\n    if (c != null) {\n      return c[0];\n    }\n  }\n  public setComment(comment: string): void {\n    if (this.comment != null) {\n      this.removeProp(Property.C, this.comment);\n    }\n    this.setProp(Property.C, comment);\n  }\n\n  private initBoard(): void {\n    this.board = new Board({\n      gridNum: this.gridNum,\n      fixedStones: this.fixedStones,\n    });\n  }\n\n  get existsNextMove(): boolean {\n    return !this.tree.atLeaf();\n  }\n  get existsBackMove(): boolean {\n    return !this.tree.atRoot();\n  }\n\n  public clone(): GennanCore {\n    const cloned = GennanCore.createFromSgf(this.sgf);\n    cloned.setFromInitPath(this.currentPath);\n    return cloned;\n  }\n\n  public playForward(idx = 0): void {\n    if (!this.existsNextMove) throw new Error(\"There are not next moves.\");\n    if (!this.tree.nextNodes[idx]) throw new Error(\"Move index is invalid.\");\n\n    this.board.takeMove(nodeToMove(this.tree.nextNodes[idx]));\n    this.tree.down(idx);\n  }\n  public playForwardTimes(times = 10, stopOnComment = true): void {\n    for (let i = 0; i < times; i++) {\n      if (!this.existsNextMove) break;\n      this.playForward();\n      if (this.comment != null && stopOnComment) break;\n    }\n  }\n\n  public playBackward(): void {\n    if (this.tree.atRoot()) throw new Error(\"This is root now.\");\n\n    this.board.undoMove();\n    this.tree.up();\n  }\n  public playBackwardTimes(times = 10, stopOnComment = true): void {\n    for (let i = 0; i < times; i++) {\n      if (!this.existsBackMove) break;\n      this.playBackward();\n      if (this.comment != null && stopOnComment) break;\n    }\n  }\n\n  public setFromInitPath(initPath: TreePath): void {\n    // initialize\n    this.tree = toTree(this.sgf);\n    this.board = new Board({\n      gridNum: this.gridNum,\n      fixedStones: this.fixedStones,\n    });\n    this.setFromFragment(initPath);\n  }\n\n  public setFromFragment(path: TreePath): void {\n    for (let i = 0; i < path.length; i++) {\n      if (this.existsNextMove) this.playForward(path[i]);\n    }\n  }\n\n  // 一手追加する\n  public addMove(move: Move): void {\n    const child = this.tree.createChildNode({\n      [move.color === Color.Black ? \"B\" : \"W\"]:\n        move.point != null ? [pointTo(move.point)] : [],\n    });\n    this.tree.addNode(child);\n  }\n\n  // 一手削除する\n  public removeMove(): void {\n    if (this.existsBackMove) {\n      this.tree.removeNode();\n      this.board.undoMove();\n    }\n  }\n\n  private setProp(property: Property, sgf: string): void {\n    const newProps = addProperty(this.tree.properties, property, sgf);\n    this.tree.setProps(newProps);\n  }\n  private removeProp(property: Property, sgf: string): void {\n    const newProps = removeProperty(this.tree.properties, property, sgf);\n    this.tree.setProps(newProps);\n  }\n\n  private setRootProp(property: Property, sgf: string): void {\n    const newProps = addProperty(this.tree.rootProperties, property, sgf);\n    this.tree.setRootProps(newProps);\n  }\n  private removeRootProp(property: Property, sgf: string): void {\n    const newProps = removeProperty(this.tree.rootProperties, property, sgf);\n    this.tree.setRootProps(newProps);\n  }\n\n  public setSymbol(point: Point, symbol: MarkupSymbol): void {\n    this.setProp(markupSymbolToProperty(symbol), pointTo(point));\n  }\n  public removeSymbol(point: Point, symbol: MarkupSymbol): void {\n    this.removeProp(markupSymbolToProperty(symbol), pointTo(point));\n  }\n\n  public setText(point: Point, text: string): void {\n    this.setProp(Property.LB, pointTo(point) + \":\" + text);\n  }\n\n  public removeText(point: Point): void {\n    const sgf = pointTo(point);\n    const properties = this.tree.properties;\n    const LB = properties[Property.LB];\n\n    if (LB != null) {\n      // 取り除く\n      properties[Property.LB] = LB.filter((v) => v.slice(0, 2) !== sgf);\n    }\n\n    // 更新\n    this.tree.setProps(properties);\n  }\n\n  public setAlpha(point: Point): void {\n    const ps = pointTo(point);\n    const properties = this.tree.properties;\n    const LB = properties[Property.LB];\n\n    let next = \"A\";\n    if (LB != null) {\n      const regex = /[^a-z]/gi; // a-z(lower,upperは無視)以外の文字が含まれているか判定する正規表現\n      const alphas = LB.filter((v) => !v.slice(-1).match(regex));\n      if (alphas.length > 0) {\n        const last = alphas.map((v) => v.slice(-1)).sort()[alphas.length - 1];\n        next = nextAlpha(last).toUpperCase();\n      }\n    }\n\n    this.setProp(Property.LB, ps + \":\" + next);\n  }\n\n  public setIncrement(point: Point): void {\n    const ps = pointTo(point);\n    const properties = this.tree.properties;\n    const LB = properties[Property.LB];\n\n    let next = 1;\n    if (LB != null) {\n      const nums = LB.filter((v) => {\n        return !isNaN(v.split(\":\")[1] as any);\n      });\n      if (nums.length > 0) {\n        const last = nums\n          .map((v) => Number(v.split(\":\")[1]))\n          .sort((a, b) => a - b)[nums.length - 1];\n        next = Number(last) + 1;\n      }\n    }\n\n    this.setProp(Property.LB, ps + \":\" + next.toString());\n  }\n\n  /**\n   * 置石をセットする\n   * @param stone\n   */\n  public addFixedStone(stone: Stone): void {\n    const newProps = addProperty(\n      this.tree.rootProperties,\n      stone.color === Color.Black ? \"AB\" : \"AW\",\n      pointTo(stone.point)\n    );\n    this.tree.setProps(newProps);\n\n    this.initBoard();\n  }\n\n  public removeFixedStone(stone: Stone): void {\n    const newProps = removeProperty(\n      this.tree.rootProperties,\n      stone.color === Color.Black ? \"AB\" : \"AW\",\n      pointTo(stone.point)\n    );\n    this.tree.setProps(newProps);\n\n    this.initBoard();\n  }\n}\n\nexport { GennanCore };\n","export * from \"./types\";\nexport * from \"./rule\";\nexport * from \"./sgf\";\n\nexport * from \"./gennanCore\";\nexport * from \"./utils\";\n","import {\n  Stone,\n  GridNum,\n  Move,\n  Point,\n  leftP,\n  upperP,\n  rightP,\n  lowerP,\n  Color,\n  oppositeColor,\n  PointState,\n} from \"../types\";\nimport { copyMatrix } from \"../utils\";\n\ntype BoardState = Array<Array<PointState>>;\n\ntype props = {\n  gridNum?: GridNum;\n  fixedStones?: Array<Stone>;\n  teban?: Color;\n};\n\nclass Board {\n  private _gridNum: GridNum;\n  private _boardState: BoardState = [[]];\n  private _fixedStones: Array<Stone> = [];\n  private _kou?: Point;\n  private _phase = 0;\n  private _teban: Color;\n  private history: Array<{\n    move: Move;\n    capturedStones: Array<Stone>;\n    kou?: Point;\n  }> = [];\n  capturesCount: {\n    [Color.Black]: number;\n    [Color.White]: number;\n  } = {\n    [Color.Black]: 0,\n    [Color.White]: 0,\n  };\n\n  public constructor({\n    gridNum = 19,\n    fixedStones = [],\n    teban = Color.Black,\n  }: props) {\n    this._gridNum = gridNum;\n    this.initBoardState();\n    this.setFixedStones(fixedStones);\n    this._teban = teban;\n  }\n\n  get boardState(): BoardState {\n    return this._boardState;\n  }\n\n  get gridNum(): GridNum {\n    return this._gridNum;\n  }\n\n  get teban(): Color {\n    return this._teban;\n  }\n\n  get phase(): Number {\n    return this._phase;\n  }\n\n  private setFixedStones(fixedStones: Array<Stone>): void {\n    this._fixedStones = fixedStones;\n    fixedStones.map((s) => (this._boardState[s.point.x][s.point.y] = s.color));\n  }\n\n  public getPointState(point: Point): PointState {\n    // clone\n    return PointState[this._boardState[point.x][point.y]];\n  }\n\n  /**\n   * initialize rule board using gridNum\n   *\n   * @return void\n   */\n  private initBoardState(): void {\n    const board: BoardState = [];\n    for (let i = 0; i < this.gridNum + 2; i++) {\n      const line: Array<PointState> = [];\n      if (i === 0 || i === this.gridNum + 1) {\n        for (let y = 0; y < this.gridNum + 2; y++) {\n          line[y] = PointState.Edge;\n        }\n      } else {\n        for (let y = 0; y < this.gridNum + 2; y++) {\n          if (y === 0 || y === this.gridNum + 1) {\n            line[y] = PointState.Edge;\n          } else {\n            line[y] = PointState.Empty;\n          }\n        }\n      }\n\n      board[i] = line;\n    }\n\n    this._boardState = board;\n  }\n\n  public takeMove(move: Move): void {\n    // if (this.teban !== move.color) throw new Error(\"Teban color is invalid.\");\n    const prevKou = this._kou;\n    const capturedStones: Array<Stone> = [];\n    // パスでない場合\n    if (move.point != null) {\n      // Validation\n      // nonempty is illegal\n      if (this._boardState[move.point.x][move.point.y] !== PointState.Empty) {\n        throw new Error(\"The point is not empty.\");\n      }\n      // check kou\n      if (\n        this._kou != null &&\n        this._kou.x === move.point.x &&\n        this._kou.y === move.point.y\n      ) {\n        throw new Error(\"The point is kou.\");\n      }\n      // suicide is illegal\n      if (this.isSuicide(move.color, move.point)) {\n        throw new Error(\"The point is suicide.\");\n      }\n\n      // 仮に石を先に置く\n      const clonedBoardState: BoardState = copyMatrix(this._boardState);\n      clonedBoardState[move.point.x][move.point.y] = move.color;\n\n      // 石を取れるかの確認\n      const oppoColor = oppositeColor(move.color);\n      const capture = (p: Point): void => {\n        if (\n          clonedBoardState[p.x][p.y] === oppoColor &&\n          Board.isGroupSurroundedByEnemy(p, clonedBoardState)\n        ) {\n          // 石が取れたら重複を排除しつつ追加する\n          Board.getConnectedStones(p, clonedBoardState).map((s) => {\n            if (\n              capturedStones.findIndex(\n                (cs) => s.point.x === cs.point.x && s.point.y === cs.point.y\n              ) === -1\n            ) {\n              capturedStones.push(s);\n            }\n          });\n        }\n      };\n      // 上下左右をチェック\n      capture(leftP(move.point));\n      capture(upperP(move.point));\n      capture(rightP(move.point));\n      capture(lowerP(move.point));\n\n      // コウを記録\n      this._kou = undefined;\n      if (\n        capturedStones.length === 1 &&\n        Board.isSurroundedByEnemy(move.point, clonedBoardState)\n      ) {\n        this._kou = capturedStones[0].point;\n      }\n\n      // 取られた地点を空にする\n      capturedStones.map((cs) => {\n        clonedBoardState[cs.point.x][cs.point.y] = PointState.Empty;\n      });\n      // 取られた石数を加算\n      this.capturesCount[oppoColor] += capturedStones.length;\n\n      // 状態を反映\n      this._boardState = clonedBoardState;\n    }\n\n    // History\n    this.history.push({\n      move,\n      capturedStones,\n      kou: prevKou,\n    });\n    this._phase += 1; // 手数を進める\n    this._teban = oppositeColor(move.color); // 手番を変える\n  }\n\n  public undoMove(): void {\n    const history = this.history.pop();\n    if (history == null) return;\n\n    // 打った石を取り除く\n    if (history.move.point != null) {\n      this._boardState[history.move.point.x][history.move.point.y] =\n        PointState.Empty;\n    }\n    // 取られた石を戻す\n    history.capturedStones.map((s) => {\n      this._boardState[s.point.x][s.point.y] = s.color;\n    });\n    this.capturesCount[oppositeColor(history.move.color)] -=\n      history.capturedStones.length; // 取られた石数を戻す\n    this._kou = history.kou; // コウをセット\n    this._phase -= 1; // 手数を戻す\n    this._teban = history.move.color; // 手番を戻す\n  }\n\n  /**\n   * (同じ色の)繋がっている石の地点の配列を取得する\n   * @param point\n   */\n  private static getConnectedStones(\n    point: Point,\n    boardState: BoardState\n  ): Array<Stone> {\n    const color = boardState[point.x][point.y];\n    if (color !== PointState.Black && color !== PointState.White) {\n      return [];\n    }\n\n    const stones: Array<Stone> = [];\n    const loop = (point_: Point): void => {\n      // すでにチェックされていたら終了\n      if (\n        stones.find((s) => s.point.x === point_.x && s.point.y === point_.y)\n      ) {\n        return;\n      }\n\n      stones.push({ color, point: point_ });\n      // 左\n      const lp = leftP(point_);\n      if (boardState[lp.x][lp.y] === color) loop(lp);\n      // 上\n      const up = upperP(point_);\n      if (boardState[up.x][up.y] === color) loop(up);\n      // 右\n      const rp = rightP(point_);\n      if (boardState[rp.x][rp.y] === color) loop(rp);\n      // 下\n      const lowP = lowerP(point_);\n      if (boardState[lowP.x][lowP.y] === color) loop(lowP);\n    };\n\n    loop(point);\n\n    return stones;\n  }\n\n  private isSuicide(color: Color, point: Point): boolean {\n    // 仮に石を置いてみる\n    const clonedBoardState = copyMatrix(this._boardState);\n    clonedBoardState[point.x][point.y] = color;\n\n    // - 置いた石が敵石に囲まれていなければ自殺手ではない\n    if (!Board.isGroupSurroundedByEnemy(point, clonedBoardState)) {\n      return false;\n    }\n\n    // - 置いた石が敵石に囲まれているが、敵石のいずれかを囲めるなら自殺手ではない\n    const left = leftP(point);\n    const upper = upperP(point);\n    const right = rightP(point);\n    const lower = lowerP(point);\n    if (\n      // 左\n      (clonedBoardState[left.x][left.y] === oppositeColor(color) &&\n        Board.isGroupSurroundedByEnemy(left, clonedBoardState)) ||\n      // 上\n      (clonedBoardState[upper.x][upper.y] === oppositeColor(color) &&\n        Board.isGroupSurroundedByEnemy(upper, clonedBoardState)) ||\n      // 右\n      (clonedBoardState[right.x][right.y] === oppositeColor(color) &&\n        Board.isGroupSurroundedByEnemy(right, clonedBoardState)) ||\n      // 下\n      (clonedBoardState[lower.x][lower.y] === oppositeColor(color) &&\n        Board.isGroupSurroundedByEnemy(lower, clonedBoardState))\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 地点に石があり、かつその石が単体でが敵石に囲まれているかどうかを判定\n   * @param point\n   * @param boardState\n   */\n  private static isSurroundedByEnemy(point: Point, boardState: BoardState) {\n    if (\n      boardState[point.x][point.y] === PointState.Empty ||\n      boardState[point.x][point.y] === PointState.Edge\n    ) {\n      return false;\n    }\n\n    const oppoColor = oppositeColor(boardState[point.x][point.y] as Color);\n\n    if (\n      (boardState[point.x][point.y - 1] === PointState.Edge ||\n        boardState[point.x][point.y - 1] === oppoColor) &&\n      (boardState[point.x + 1][point.y] === PointState.Edge ||\n        boardState[point.x + 1][point.y] === oppoColor) &&\n      (boardState[point.x][point.y + 1] === PointState.Edge ||\n        boardState[point.x][point.y + 1] === oppoColor) &&\n      (boardState[point.x - 1][point.y] === PointState.Edge ||\n        boardState[point.x - 1][point.y] === oppoColor)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 地点に石があり、かつその石を含むグループが敵石に囲まれているかどうかを判定\n   * @param point\n   * @param boardState\n   */\n  private static isGroupSurroundedByEnemy(\n    point: Point,\n    boardState: BoardState\n  ) {\n    if (\n      boardState[point.x][point.y] === PointState.Empty ||\n      boardState[point.x][point.y] === PointState.Edge\n    ) {\n      return false;\n    }\n\n    const checked: Array<Point> = [];\n    const color = boardState[point.x][point.y];\n    const loop = (point_: Point): boolean => {\n      // すでにチェックされていたら終了\n      if (checked.find((c) => c.x === point_.x && c.y === point_.y)) {\n        return true;\n      }\n      checked.push(point_);\n      // 空きが見つかったら終了\n      if (boardState[point_.x][point_.y] === PointState.Empty) {\n        return false;\n      }\n      // 同じ手番色なら、隣を再帰的に調べる\n      if (boardState[point_.x][point_.y] === color) {\n        // 左\n        if (!loop(leftP(point_))) return false;\n        // 上\n        if (!loop(upperP(point_))) return false;\n        // 右\n        if (!loop(rightP(point_))) return false;\n        // 下\n        if (!loop(lowerP(point_))) return false;\n      }\n      return true;\n    };\n\n    return loop(point);\n  }\n}\n\nexport { Board };\n","export * from \"./board\";\n","export * from \"./node\";\nexport * from \"./tree\";\nexport * from \"./parser\";\nexport * from \"./stringifier\";\nexport * from \"./utils\";\nexport * from \"./path\";\n","import { Properties, cloneProperties } from \"../types\";\n\nexport function cloneNode(node: Node): Node {\n  let cloneNode: Node = new RootNode({ id: \"test\", properties: {} });\n  if (node.isRoot()) {\n    cloneNode = new RootNode({\n      id: node.id,\n      properties: cloneProperties(node.properties),\n    });\n  }\n  if (node.isInternal()) {\n    cloneNode = new InternalNode({\n      id: node.id,\n      properties: cloneProperties(node.properties),\n      parent: node.parent,\n    });\n  }\n\n  node.children.map((n) => cloneNode.addChild(n));\n  return cloneNode;\n}\n\ntype Props = {\n  id: string;\n  properties: Properties;\n  parent?: Node;\n};\n\nabstract class Node {\n  readonly id: string;\n  private _properties: Properties;\n  private _children: Array<InternalNode> = [];\n\n  constructor({ id, properties }: Props) {\n    this.id = id;\n    this._properties = properties;\n  }\n\n  get children(): Array<InternalNode> {\n    return this._children;\n  }\n  get properties(): Properties {\n    return this._properties;\n  }\n\n  abstract isRoot(): this is RootNode;\n  abstract isInternal(): this is InternalNode;\n  public isLeaf(): boolean {\n    if (this._children.length <= 0) return true;\n    return false;\n  }\n\n  public addChild(node: InternalNode): Node {\n    this._children.push(node);\n    return this;\n  }\n\n  public removeChild(id: string): Node {\n    if (this.isLeaf()) throw new Error(\"The node is leaf.\");\n    const idx = this._children.findIndex((n) => n.id === id);\n    this._children.splice(idx, 1);\n    return this;\n  }\n\n  public setProperties(properties: Properties): void {\n    this._properties = properties;\n  }\n}\n\nclass RootNode extends Node {\n  public isRoot(): this is RootNode {\n    return true;\n  }\n  public isInternal(): this is InternalNode {\n    return false;\n  }\n}\n\ntype NodeProps = {\n  id: string;\n  properties: Properties;\n  parent: Node;\n};\nclass InternalNode extends Node {\n  readonly parent: Node;\n\n  constructor({ id, properties, parent }: NodeProps) {\n    super({ id, properties });\n    this.parent = parent;\n  }\n\n  public isRoot(): this is RootNode {\n    return false;\n  }\n  public isInternal(): this is InternalNode {\n    return true;\n  }\n}\n\nexport { Node, InternalNode, RootNode };\n","import { Point, Property, Properties, isProperty } from \"../types\";\nimport { assertIsDefined, randmStr } from \"../utils\";\nimport { Tree } from \"./tree\";\nimport { Node, RootNode, InternalNode } from \"./node\";\n\nclass SGFFormatError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\n// SGFの構造例\n// (;ルート\n//   (;着手1a;着手2a(;着手3aa)\n//                  (;着手3ab;着手4ab))\n//   (;着手1b(;着手2ba;着手3ba;着手4ba)\n//           (;着手3bb)))\n\nfunction escapeSgfString(sgf: string): string {\n  return sgf.toString().replace(/]/g, \"\\\\]\");\n}\n\nfunction unescapeSgfString(sgf: string): string {\n  return sgf.toString().replace(/\\\\]/g, \"]\");\n}\n\nfunction toTree(sgf: string): Tree {\n  const rootNode = toNode(sgf);\n  return new Tree({ rootNode });\n}\n\nfunction toNode(sgf: string, parent?: Node): Node {\n  if (!sgf.startsWith(\"(\") || !sgf.endsWith(\")\")) throw new SGFFormatError();\n  // 先頭と末尾の()を取り除く\n  const sgfStr = sgf.slice(1).slice(0, -1);\n\n  // 親ノードを作成\n  let firstLeftBracketIdx = -1;\n  let isInSquareBracket = false;\n\n  for (let i = 0; i < sgfStr.length; i++) {\n    if (sgfStr.charAt(i) === \"[\") isInSquareBracket = true;\n    if (sgfStr.charAt(i) === \"]\") isInSquareBracket = false;\n    if (sgfStr.charAt(i) === \"(\" && !isInSquareBracket) {\n      firstLeftBracketIdx = i;\n      break;\n    }\n  }\n\n  const branchSgf =\n    firstLeftBracketIdx !== -1 ? sgfStr.slice(0, firstLeftBracketIdx) : sgfStr;\n\n  const nodeSgfs = branchSgf.split(\";\").filter((s) => s !== \"\");\n\n  let top;\n  if (parent == null) {\n    top = new RootNode({\n      id: randmStr(),\n      properties: toProperties(nodeSgfs[0]),\n    });\n  } else {\n    top = new InternalNode({\n      id: randmStr(),\n      properties: toProperties(nodeSgfs[0]),\n      parent,\n    });\n  }\n\n  nodeSgfs.shift();\n\n  let bottom = top;\n  for (const nodeSgf of nodeSgfs) {\n    const properties = toProperties(nodeSgf);\n    const node = new InternalNode({\n      id: randmStr(),\n      properties,\n      parent: bottom,\n    });\n    bottom.addChild(node);\n    bottom = node;\n  }\n\n  // childrenの生成\n  const children: Array<InternalNode> = [];\n  let leftBracketIdx = -1;\n  let leftBracketCount = 0;\n  let rightBracketCount = 0;\n  isInSquareBracket = false;\n  for (let i = 0; i < sgfStr.length; i++) {\n    if (sgfStr.charAt(i) === \"[\") isInSquareBracket = true;\n    if (sgfStr.charAt(i) === \"]\") isInSquareBracket = false;\n\n    if (sgfStr.charAt(i) === \"(\" && !isInSquareBracket) {\n      if (leftBracketIdx === -1) leftBracketIdx = i;\n      leftBracketCount += 1;\n    }\n\n    if (sgfStr.charAt(i) === \")\" && !isInSquareBracket) {\n      if (leftBracketIdx === -1) throw new SGFFormatError();\n      rightBracketCount += 1;\n      if (leftBracketCount === rightBracketCount) {\n        // 再帰\n        const child = toNode(sgfStr.substring(leftBracketIdx, i + 1), bottom);\n        children.push(child as InternalNode);\n        leftBracketIdx = -1;\n        leftBracketCount = 0;\n        rightBracketCount = 0;\n      }\n    }\n  }\n\n  if (\n    leftBracketIdx !== -1 ||\n    leftBracketCount !== 0 ||\n    rightBracketCount !== 0\n  ) {\n    throw new SGFFormatError(); // 対応する')'が見つからなかった場合\n  }\n\n  for (const child of children) {\n    bottom.addChild(child);\n  }\n\n  return top;\n}\n\n// SZ[19]PB[芝野虎丸]PW[余正麒]AB[ab][cd] => {SZ: [\"19\"], PB: [\"芝野虎丸\"], PW: [\"余正麒\"], AB: [\"ab\", \"cd\"]}\nfunction toProperties(nodeSgf: string): Properties {\n  const regexp = new RegExp(\"(.*?])(?=[A-Z])|(.*?])$\", \"gs\");\n  // const props = nodeSgf.match(regexp); nodeSgfの末尾に改行コードが含まれていたりした場合うまくいかない\n\n  const props = nodeSgf.trim().match(regexp);\n\n  assertIsDefined(props);\n  const properties: Properties = {};\n  props.map((p) => {\n    // const regexp = new RegExp(\"(.*?)(?=\\\\[)\", \"g\");\n    // const result = p.match(regexp);\n\n    // assertIsDefined(result);\n\n    // if (!isProperty(result[0])) throw new Error(); // Propertyが正しい値かどうか\n\n    // properties[result[0]] = [];\n\n    // 後読みがSafariなど一部の環境でエラーになる\n    // const regexp2 = new RegExp(\"(?<=\\\\[).*?(?=])\", \"g\");\n    // const result2 = p.match(regexp2);\n    // assertIsDefined(result2);\n    // result2.map((r) => properties[result[0] as Property]?.push(r));\n\n    // ので、正規表現を一旦諦めてシンプルなsplitで対応\n\n    let propKeyBuf = \"\";\n    let propKey: Property = \"\";\n    let valBuf = \"\";\n    let isInSquareBracket = false;\n    for (var i = 0; i < p.length; i++) {\n      // set is in square bracket\n      if (p.charAt(i) === \"[\" && !isInSquareBracket) {\n        isInSquareBracket = true;\n        continue;\n      }\n\n      // set Property key\n      if (!isInSquareBracket) {\n        if (p.charAt(i).trim()) {\n          // 改行コードやスペースでない場合は、新たなPropertyブロックに入ったとみなす\n          propKey = \"\";\n          propKeyBuf += p.charAt(i);\n        }\n        continue;\n      }\n\n      if (\n        isInSquareBracket &&\n        p.charAt(i) === \"]\" &&\n        p.charAt(i - 1) !== \"\\\\\"\n      ) {\n        if (!propKey) {\n          propKey = propKeyBuf.trim(); // 改行コードなどが入り込む可能性\n          propKeyBuf = \"\";\n        }\n\n        if (!properties[propKey]) {\n          properties[propKey] = [];\n        }\n        properties[propKey]?.push(valBuf);\n        valBuf = \"\";\n\n        isInSquareBracket = false;\n        continue;\n      }\n\n      valBuf += p.charAt(i);\n    }\n  });\n\n  return properties;\n}\n\nfunction toPoint(point: string): Point {\n  const alpha = \"abcdefghijklmnopqrs\".split(\"\");\n  const pointArr = point.toLowerCase().split(\"\");\n  return {\n    x: alpha.indexOf(pointArr[0]) + 1,\n    y: alpha.indexOf(pointArr[1]) + 1,\n  };\n}\n\nfunction pointTo(point: Point): string {\n  const alpha = \"abcdefghijklmnopqrs\";\n  return alpha.substr(point.x - 1, 1) + alpha.substr(point.y - 1, 1);\n}\n\nexport { toProperties, toTree, toPoint, pointTo };\n","// [0]             equals '0'\n// [1]             equals '1'\n// [0,1]           equals '0.1'\n// [0,0,0,0,1,1,0] equals '0:4.1:2.0'\n\n// [0,0,1+]        equals [0.0.1.0...(500 times)]\nexport type TreePath = Array<number>;\n\nexport function toInitPathString(path: TreePath, isEnd: boolean = false) {\n  if (path.length === 0) {\n    return \"0\";\n  }\n\n  let firstNumber = 0;\n  for (let i = 0; i < path.length; i++) {\n    let elem = path[i];\n    if (elem !== 0) {\n      break;\n    } else {\n      firstNumber = i + 1;\n    }\n  }\n  let component = toFragmentString(path.slice(firstNumber));\n  if (component) {\n    // 0.1....0:3 => 0.1....+\n    if (isEnd) {\n      const splitted = component.split(\".\");\n      const lastToken = splitted[splitted.length - 1];\n      if (lastToken.split(\":\").length > 1 && lastToken.split(\":\")[0] === \"0\")\n        component = splitted.slice(0, splitted.length - 1).join(\".\") + \"+\";\n    }\n    return firstNumber + \".\" + component;\n  } else {\n    return firstNumber + \"\";\n  }\n}\n\nexport function toFragmentString(path: TreePath) {\n  if (path.length === 0) {\n    return \"\";\n  }\n  let last: string = \"\";\n  let next = null;\n  let repeated = 0;\n  let out = \"\";\n\n  let flush = function () {\n    let component = \"\";\n    if (repeated < 2) {\n      component = last + \"\";\n    } else {\n      component = last + \":\" + repeated;\n    }\n    if (out === \"\") {\n      out = component;\n    } else {\n      out += \".\" + component;\n    }\n    repeated = 1;\n  };\n\n  for (let i = 0; i < path.length; i++) {\n    next = path[i];\n    if (last === \"\") {\n      last = next.toString();\n    }\n    if (next.toString() === last) {\n      repeated++;\n    } else {\n      flush();\n    }\n    last = next.toString();\n  }\n  flush();\n  return out;\n}\n\nexport function parseInitialPath(initPos: string): TreePath {\n  if (initPos === \"+\") {\n    return toEnd;\n  }\n\n  var out = [];\n  var firstNum = parseInt(initPos, 10);\n  for (var j = 0; j < firstNum; j++) {\n    out.push(0);\n  }\n\n  // The only valid next characters are . or +.\n  var rest = initPos.replace(firstNum + \"\", \"\");\n  if (rest == \"\") {\n    return out;\n  }\n\n  var next = rest.charAt(0);\n  if (next === \".\") {\n    return out.concat(parseFragment(rest.substring(1)));\n  } else if (next === \"+\") {\n    return out.concat(toEnd);\n  } else {\n    throw new Error(\"Unexpected token [\" + next + \"] for path \" + initPos);\n  }\n}\n\nexport function parseFragment(pathStr: string): TreePath {\n  var splat = pathStr.split(/([\\.:+])/);\n  var numre = /^\\d+$/;\n  var out = [];\n\n  var states = {\n    VARIATION: 1,\n    SEPARATOR: 2,\n    MULTIPLIER: 3,\n  };\n  var curstate = states.VARIATION;\n  var prevVariation = null;\n  for (var i = 0; i < splat.length; i++) {\n    var token = splat[i];\n    if (curstate === states.SEPARATOR) {\n      if (token === \".\") {\n        curstate = states.VARIATION;\n      } else if (token === \":\") {\n        curstate = states.MULTIPLIER;\n      } else if (token === \"+\") {\n        // There could be more characters after this. Maybe throw an error.\n        return out.concat(toEnd);\n      } else {\n        throw new Error(\"Unexpected token \" + token + \" for path \" + pathStr);\n      }\n    } else {\n      if (!numre.test(token)) {\n        throw new Error(\n          \"Was expecting number but found \" + token + \" for path: \" + pathStr\n        );\n      }\n      var num = parseInt(token, 10);\n      if (curstate === states.VARIATION) {\n        out.push(num);\n        prevVariation = num;\n        curstate = states.SEPARATOR;\n      } else if (curstate === states.MULTIPLIER) {\n        if (prevVariation === null) {\n          throw new Error(\n            \"Error using variation multiplier for path: \" + pathStr\n          );\n        }\n        // We should have already added the variation once, so we add num-1\n        // more times. This has the side effect that 0:0 is equivalent to 0:1\n        // and also equivalent to just 0. Probably ok.\n        for (var j = 0; j < num - 1; j++) {\n          out.push(prevVariation);\n        }\n        prevVariation = null;\n        curstate = states.SEPARATOR;\n      }\n    }\n  }\n  return out;\n}\n\nconst toEnd = new Array(500).fill(0);\n","import { Properties } from \"../types\";\n\nexport function propertiesToSgf(props: Properties): string {\n  let sgf = \";\";\n  for (const [key, value] of Object.entries(props)) {\n    if (value != null && value.length > 0) {\n      sgf += key + \"[\" + value.join(\"][\") + \"]\";\n    }\n  }\n  return sgf;\n}\n","import { randmStr } from \"../utils\";\nimport { Node, RootNode, InternalNode, cloneNode } from \"./\";\nimport { propertiesToSgf } from \"./stringifier\";\nimport { Properties, cloneProperties } from \"../types\";\nimport { TreePath } from \"./path\";\n\ntype Props = {\n  rootNode: RootNode;\n};\n\nclass Tree {\n  private _rootNode: RootNode;\n  private _currentNode: Node;\n\n  public constructor({ rootNode }: Props) {\n    this._rootNode = rootNode;\n    this._currentNode = rootNode;\n  }\n\n  get properties(): Properties {\n    return cloneProperties(this._currentNode.properties);\n  }\n\n  get rootProperties(): Properties {\n    return cloneProperties(this._rootNode.properties);\n  }\n\n  get rootNode(): RootNode {\n    return cloneNode(this._rootNode);\n  }\n\n  get node(): Node {\n    return cloneNode(this._currentNode);\n  }\n\n  get nextNodes(): Array<Node> {\n    return this._currentNode.children.map((n) => cloneNode(n));\n  }\n\n  public atRoot(): boolean {\n    return this._currentNode.isRoot();\n  }\n\n  public atLeaf(): boolean {\n    return this._currentNode.isLeaf();\n  }\n\n  /**\n   * up\n   * @param idx\n   */\n  public up(): Tree {\n    if (this._currentNode.isInternal()) {\n      this._currentNode = this._currentNode.parent;\n    }\n\n    return this;\n  }\n\n  /**\n   * down\n   */\n  public down(idx = 0): Tree {\n    if (this._currentNode.children[idx]) {\n      this._currentNode = this._currentNode.children[idx];\n    } else {\n      throw new Error();\n    }\n\n    return this;\n  }\n\n  /**\n   * get treepath of current node\n   */\n  public getCurrentPath(): TreePath {\n    const path: TreePath = [];\n    const loop = (node: Node): void => {\n      if (node.isInternal()) {\n        path.unshift(node.parent.children.findIndex((rn) => rn.id === node.id));\n        loop(node.parent);\n      }\n    };\n\n    loop(this._currentNode);\n    return path;\n  }\n  // あまり速度に違いは見られなかった\n  // public getCurrentPath(): TreePath {\n  //   if (this._currentNode == null) return [];\n  //   const path: TreePath = [];\n  //   const loop = (node: Node): void => {\n  //     if (node.isInternal()) {\n  //       path.push(node.parent.children.findIndex((rn) => rn.id === node.id));\n  //       loop(node.parent);\n  //     }\n  //   };\n\n  //   loop(this._currentNode);\n\n  //   const reversed = path.reverse();\n  //   return reversed;\n  // }\n\n  public createChildNode(properties: Properties): InternalNode {\n    return new InternalNode({\n      id: randmStr(),\n      properties,\n      parent: this._currentNode,\n    });\n  }\n\n  // 現在位置に一手を足すfn\n  public addNode(node: InternalNode): void {\n    this._currentNode.addChild(node);\n  }\n  // 現在位置が末尾の時削除してcurrentNodeを一つ前に戻す\n  public removeNode(): void {\n    if (this.atRoot()) throw new Error(\"Root node can not be removed.\");\n    const id = this._currentNode.id;\n    this.up();\n    this._currentNode.removeChild(id);\n  }\n\n  /**\n   * 深さ優先探索でNodeを取得する\n   * @param id\n   */\n  private getNodeById(id: string): Node | undefined {\n    const loop = (root: Node): Node | undefined => {\n      if (root.id === id) return root;\n      if (root.children.length > 0) {\n        for (let i = 0; i < root.children.length; i++) {\n          const n = loop(root.children[i]);\n          if (n) return n;\n        }\n      }\n    };\n\n    return loop(this._rootNode);\n  }\n\n  public setRootProps(properties: Properties): void {\n    this._rootNode.setProperties(properties);\n  }\n\n  public setProps(properties: Properties): void {\n    this._currentNode.setProperties(properties);\n  }\n\n  public toSgf(): string {\n    const dfs = (node: Node): string => {\n      let sgf = propertiesToSgf(node.properties);\n      if (node.children.length > 1) {\n        node.children.map((n) => {\n          sgf += \"(\" + dfs(n) + \")\";\n        });\n      } else if (node.children.length === 1) {\n        sgf += dfs(node.children[0]);\n      }\n\n      return sgf;\n    };\n\n    return \"(\" + dfs(this._rootNode) + \")\";\n  }\n}\n\nexport { Tree };\n","import { Color, Move, Property } from \"../types\";\nimport { toPoint, pointTo } from \"./parser\";\nimport { Node, InternalNode } from \"./node\";\nimport { randmStr } from \"../utils\";\n\nfunction nodeToMove(node: Node): Move {\n  const b = node.properties[Property.B];\n  const w = node.properties[Property.W];\n  let move: Move;\n  if (b != null && b.length > 0) {\n    if (b[0] == null || b[0] == \"tt\") {\n      move = {\n        color: Color.Black,\n      };\n    } else {\n      move = {\n        color: Color.Black,\n        point: toPoint(b[0]),\n      };\n    }\n  } else if (w != null && w.length > 0) {\n    if (w[0] == null || w[0] == \"tt\") {\n      move = {\n        color: Color.White,\n      };\n    } else {\n      move = {\n        color: Color.White,\n        point: toPoint(w[0]),\n      };\n    }\n  } else {\n    throw new Error(\"\");\n  }\n  return move;\n}\n\nfunction moveToInternalNode(move: Move, parent: Node): InternalNode {\n  return new InternalNode({\n    id: randmStr(),\n    properties: {\n      [move.color === Color.Black ? \"B\" : \"W\"]:\n        move.point != null ? [pointTo(move.point)] : [],\n    },\n    parent,\n  });\n}\n\nexport { nodeToMove, moveToInternalNode };\n","const Color = {\n  Black: \"Black\",\n  White: \"White\",\n} as const;\ntype Color = typeof Color[keyof typeof Color];\n\nfunction oppositeColor(color: Color): Color {\n  if (color === Color.Black) return Color.White;\n  if (color === Color.White) return Color.Black;\n  else return color;\n}\n\nexport { Color, oppositeColor };\n","const Gridnum = [9, 13, 19] as const;\nexport type GridNum = typeof Gridnum[number];\nexport function isGridNum(n: number): n is GridNum {\n  return Gridnum.indexOf(n as any) !== -1;\n}\n","export * from \"./color\";\nexport * from \"./gridNum\";\nexport * from \"./move\";\nexport * from \"./stone\";\nexport * from \"./point\";\nexport * from \"./pointState\";\nexport * from \"./property\";\nexport * from \"./markupSymbol\";\n","import { Property } from \"./property\";\n\nconst MarkupSymbol = {\n  Circle: \"Circle\",\n  Square: \"Square\",\n  Triangle: \"Triangle\",\n  Cross: \"Cross\",\n} as const;\ntype MarkupSymbol = typeof MarkupSymbol[keyof typeof MarkupSymbol];\n\nfunction markupSymbolToProperty(symbol: MarkupSymbol): Property {\n  switch (symbol) {\n    case MarkupSymbol.Circle:\n      return Property.CR;\n    case MarkupSymbol.Square:\n      return Property.SQ;\n    case MarkupSymbol.Triangle:\n      return Property.TR;\n    case MarkupSymbol.Cross:\n      return Property.MA;\n    default:\n      throw new Error(\"symbol is invalid.\");\n  }\n}\n\nexport { MarkupSymbol, markupSymbolToProperty };\n","type Point = {\n  x: number;\n  y: number;\n};\n\nfunction leftP(point: Point): Point {\n  return {\n    x: point.x - 1,\n    y: point.y,\n  };\n}\nfunction upperP(point: Point): Point {\n  return {\n    x: point.x,\n    y: point.y - 1,\n  };\n}\nfunction rightP(point: Point): Point {\n  return {\n    x: point.x + 1,\n    y: point.y,\n  };\n}\nfunction lowerP(point: Point): Point {\n  return {\n    x: point.x,\n    y: point.y + 1,\n  };\n}\n\nexport { Point, leftP, upperP, rightP, lowerP };\n","import { Color } from \"./\";\n\nconst PointState = {\n  Black: Color.Black,\n  White: Color.White,\n  Empty: \"Empty\",\n  Edge: \"Edge\",\n} as const;\ntype PointState = typeof PointState[keyof typeof PointState];\n\nexport { PointState };\n","import { isUpperCase } from \"../utils\";\n\nconst Property = {\n  B: \"B\",\n  W: \"W\",\n  C: \"C\",\n  SZ: \"SZ\",\n  PB: \"PB\",\n  PW: \"PW\",\n  AB: \"AB\",\n  AW: \"AW\",\n  GN: \"GN\",\n  KM: \"KM\",\n  CR: \"CR\",\n  SQ: \"SQ\",\n  TR: \"TR\",\n  MA: \"MA\",\n  LB: \"LB\",\n  FF: \"FF\",\n  CA: \"CA\",\n  GM: \"GM\",\n  BR: \"BR\",\n  WR: \"WR\",\n  RE: \"RE\",\n  DT: \"DT\",\n  AP: \"AP\",\n  SO: \"SO\",\n  BC: \"BC\",\n  WC: \"WC\",\n  EV: \"EV\",\n  TM: \"TM\",\n  LT: \"LT\",\n  LC: \"LC\",\n  GK: \"GK\",\n  OT: \"OT\",\n  RU: \"RU\",\n  PL: \"PL\",\n  MULTIGOGM: \"MULTIGOGM\",\n  KGSDE: \"KGSDE\",\n  KGSSB: \"KGSSB\",\n  KGSSW: \"KGSSW\",\n} as const;\ntype Property = typeof Property[keyof typeof Property] | string;\n\nfunction isProperty(str: string): str is Property {\n  // 値の種類が膨大なので大文字かどうかだけ判定する\n  return isUpperCase(str);\n  // return Object.values(Property).indexOf(str as any) !== -1;\n}\n\ntype Properties = { [key in Property]?: Array<string> };\n\nfunction cloneProperties(properties: Properties): Properties {\n  return JSON.parse(JSON.stringify(properties)) as Properties;\n}\n\n/**\n * propertiesに値を追加してコピーしたものを返却する\n * @param properties\n * @param key\n * @param val\n */\nfunction addProperty(\n  properties: Properties,\n  key: Property,\n  val: string\n): Properties {\n  const cloneProps = cloneProperties(properties);\n\n  let bef = cloneProps[key];\n  if (bef != null) {\n    bef.push(val);\n  } else {\n    bef = [val];\n  }\n  const newP = Array.from(new Set(bef)); // 重複排除\n  cloneProps[key] = newP;\n\n  return cloneProps;\n}\n\nfunction removeProperty(\n  properties: Properties,\n  key: Property,\n  val: string\n): Properties {\n  const cloneProps = cloneProperties(properties);\n  const bef = cloneProps[key];\n\n  if (bef != null) {\n    cloneProps[key] = bef.filter((v) => v !== val);\n  }\n\n  return cloneProps;\n}\n\nexport {\n  Property,\n  isProperty,\n  Properties,\n  cloneProperties,\n  addProperty,\n  removeProperty,\n};\n","export function assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n  if (val === undefined || val === null) {\n    // throw new AssertionError(\n    //   `Expected 'val' to be defined, but received ${val}`\n    // );\n    throw new Error(`Expected 'val' to be defined, but received ${val}`);\n  }\n}\n\nexport function copyMatrix<A>(base: Array<Array<A>>): Array<Array<A>> {\n  const result: Array<Array<A>> = [];\n  for (const line of base) {\n    result.push([...line]);\n  }\n  return result;\n}\n\nexport function nextAlpha(s: string): string {\n  const alpha = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  return alpha[alpha.indexOf(s.toLowerCase()) + 1];\n}\n\nexport function randmStr(): string {\n  return Math.random().toString(32).substring(2);\n}\nexport function isUpperCase(c: string): boolean {\n  return /^[A-Z]+$/g.test(c);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/index.ts\");\n"],"sourceRoot":""}